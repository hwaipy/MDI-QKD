package com.hydra.test.groundtdcserver;

import com.hydra.device.tdc.TDCParser;
import com.hydra.device.tdc.adapters.GroundTDCDataAdapter;
import com.hydra.device.tdc.adapters.SimpleTDCDataAdapter;
import com.hydra.physics.mdiqkd.MDIQKDDataBlockParser;
import com.xeiam.xchart.Chart;
import com.xeiam.xchart.Histogram;
import com.xeiam.xchart.Series;
import com.xeiam.xchart.StyleManager;
import com.xeiam.xchart.XChartPanel;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

/**
 *
 * @author Hwaipy
 */
public class AppFrame extends javax.swing.JFrame {

    private final Preferences preferences = Preferences.userNodeForPackage(AppFrame.class);
    private final XChartPanel chartPanel;
    private final XChartPanel homChartPanel;
    private final Chart chart;
    private final Chart homChart;
    private final JTextField[] counterFields;
    private final JTextField[] delayFields;
    private int indexTrigger = 1;
    private int indexSignal = 2;
    private double viewFrom = -100;
    private double viewTo = 100;
    private double pulsePeriod = 13;
    private double gateWidth = 3;
    private int clockGateWidth = 300;
    private int clockRep = 10000;

    /**
     * Creates new form AppFrame
     */
    public AppFrame() {
        timeEvents = new ArrayList[16];
        for (int i = 0; i < timeEvents.length; i++) {
            timeEvents[i] = new ArrayList<>();
        }
        initServer();
        chart = new Chart(100, 400);
        chart.addSeries("Histogram", new int[]{0}, new int[]{0});
        chart.addSeries("Fitted", new int[]{0}, new int[]{0});
        chart.getStyleManager().setLegendVisible(false);
        chart.getStyleManager().setMarkerSize(0);
        chartPanel = new XChartPanel(chart);
        homChart = new Chart(100, 400);
        homChart.getStyleManager().setChartType(StyleManager.ChartType.Bar);
        Series homSeries = homChart.addSeries("HOM", new int[]{1}, new int[]{0});
        homChart.getStyleManager().setLegendVisible(false);
        homChart.getStyleManager().setMarkerSize(0);
        homChart.getStyleManager().setXAxisLogarithmic(true);
        homChartPanel = new XChartPanel(homChart);
        initComponents();
        counterFields = new JTextField[]{jTextFieldCount1, jTextFieldCount2, jTextFieldCount3, jTextFieldCount4, jTextFieldCount5, jTextFieldCount6, jTextFieldCount7, jTextFieldCount8, jTextFieldCount9, jTextFieldCount10, jTextFieldCount11, jTextFieldCount12, jTextFieldCount13, jTextFieldCount14, jTextFieldCount15, jTextFieldCount16};
        delayFields = new JTextField[]{jTextFieldDelay1, jTextFieldDelay2, jTextFieldDelay3, jTextFieldDelay4, jTextFieldDelay5, jTextFieldDelay6, jTextFieldDelay7, jTextFieldDelay8, jTextFieldDelay9, jTextFieldDelay10, jTextFieldDelay11, jTextFieldDelay12, jTextFieldDelay13, jTextFieldDelay14, jTextFieldDelay15, jTextFieldDelay16};
        loadPreferences();
        connectPreferences();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldIndexTrigger = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldIndexSignal = new javax.swing.JTextField();
        jCheckBoxInt = new javax.swing.JCheckBox();
        jButtonClear = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldViewFrom = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        jTextFieldViewTo = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jTextFieldClockRep = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jTextFieldClockGate = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        jCheckBoxClockOut = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jButtonFitting = new javax.swing.JButton();
        jButtonFittingClear = new javax.swing.JButton();
        jLabelFittingResult = new javax.swing.JLabel();
        jPanel3 = chartPanel;
        jPanel2 = new javax.swing.JPanel();
        jPanel23 = homChartPanel;
        jCheckBoxViewHOM = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldCount1 = new javax.swing.JTextField();
        jTextFieldDelay1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldCount2 = new javax.swing.JTextField();
        jTextFieldDelay2 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldDelay3 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldCount3 = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldCount4 = new javax.swing.JTextField();
        jTextFieldDelay4 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jTextFieldCount5 = new javax.swing.JTextField();
        jTextFieldDelay5 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jTextFieldCount6 = new javax.swing.JTextField();
        jTextFieldDelay6 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jTextFieldCount7 = new javax.swing.JTextField();
        jTextFieldDelay7 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jTextFieldCount8 = new javax.swing.JTextField();
        jTextFieldDelay8 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        jTextFieldCount9 = new javax.swing.JTextField();
        jTextFieldDelay9 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jPanel16 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jTextFieldCount10 = new javax.swing.JTextField();
        jTextFieldDelay10 = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jTextFieldCount11 = new javax.swing.JTextField();
        jTextFieldDelay11 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jTextFieldCount12 = new javax.swing.JTextField();
        jTextFieldDelay12 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jPanel19 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jTextFieldCount13 = new javax.swing.JTextField();
        jTextFieldDelay13 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jTextFieldCount14 = new javax.swing.JTextField();
        jTextFieldDelay14 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jTextFieldCount15 = new javax.swing.JTextField();
        jTextFieldDelay15 = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jTextFieldCount16 = new javax.swing.JTextField();
        jTextFieldDelay16 = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        jCheckBoxAutoRestart = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldTriggerFrequency = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldTriggerPeriod = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jTextFieldTriggerPeriodPM = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jTextFieldPulsePeriod = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jTextFieldGateWidth = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jTextFieldCoincidence = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        jTextFieldCoinEffe1 = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jTextFieldCoinEffe2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Trigger");

        jTextFieldIndexTrigger.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldIndexTrigger.setText("1");

        jLabel2.setText("Signal");

        jTextFieldIndexSignal.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldIndexSignal.setText("5");

        jCheckBoxInt.setSelected(true);
        jCheckBoxInt.setText("INT");
        jCheckBoxInt.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxIntItemStateChanged(evt);
            }
        });

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jLabel7.setText("View from");

        jTextFieldViewFrom.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldViewFrom.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldViewFrom.setText("-100.000");

        jLabel43.setText("ns to");

        jTextFieldViewTo.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldViewTo.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldViewTo.setText("100.000");

        jLabel44.setText("ns");

        jLabel56.setText("Rep");

        jTextFieldClockRep.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldClockRep.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldClockRep.setText("10000");

        jLabel57.setText("ps");

        jLabel54.setText("Clock Gate");

        jTextFieldClockGate.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldClockGate.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldClockGate.setText("300");

        jLabel55.setText("ps");

        jCheckBoxClockOut.setText("ClockOut");

        jButtonFitting.setText("Fitting");
        jButtonFitting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFittingActionPerformed(evt);
            }
        });

        jButtonFittingClear.setText("Clear");
        jButtonFittingClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFittingClearActionPerformed(evt);
            }
        });

        jLabelFittingResult.setText(" ");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonFitting)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelFittingResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonFittingClear))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonFitting)
                    .addComponent(jButtonFittingClear)
                    .addComponent(jLabelFittingResult))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldIndexTrigger, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldIndexSignal, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jCheckBoxInt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClear)
                .addGap(36, 36, 36)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldViewFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel43)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldViewTo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel44)
                .addGap(0, 150, Short.MAX_VALUE))
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addComponent(jLabel56)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldClockRep, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel57, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel54)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldClockGate, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel55, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxClockOut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldIndexTrigger, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldIndexSignal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxInt)
                    .addComponent(jButtonClear)
                    .addComponent(jLabel7)
                    .addComponent(jTextFieldViewFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43)
                    .addComponent(jTextFieldViewTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel24Layout.createSequentialGroup()
                        .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel54)
                            .addComponent(jTextFieldClockGate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel55)
                            .addComponent(jLabel56)
                            .addComponent(jTextFieldClockRep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel57)
                            .addComponent(jCheckBoxClockOut))
                        .addContainerGap())
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel3.setMinimumSize(new java.awt.Dimension(740, 400));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 425, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("2-Fold", jPanel1);

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 435, Short.MAX_VALUE)
        );

        jCheckBoxViewHOM.setSelected(true);
        jCheckBoxViewHOM.setText("ViewHOM");

        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jCheckBoxViewHOM)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(594, Short.MAX_VALUE))
            .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxViewHOM)
                    .addComponent(jButton2))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("HOM", jPanel2);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Channels"));

        jLabel3.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel3.setText("CH 1");

        jTextFieldCount1.setEditable(false);
        jTextFieldCount1.setFont(new java.awt.Font("Monospaced", 0, 48)); // NOI18N
        jTextFieldCount1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount1.setText("0");

        jTextFieldDelay1.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay1.setText("0.00");

        jLabel4.setText("ns");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel3)
                .addComponent(jTextFieldDelay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel4))
        );

        jLabel5.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel5.setText("CH 2");

        jTextFieldCount2.setEditable(false);
        jTextFieldCount2.setFont(new java.awt.Font("Monospaced", 0, 48)); // NOI18N
        jTextFieldCount2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount2.setText("0");

        jTextFieldDelay2.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay2.setText("0.00");

        jLabel6.setText("ns");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(0, 11, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5)
                .addComponent(jTextFieldDelay2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel6))
        );

        jLabel11.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel11.setText("CH 3");

        jTextFieldDelay3.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay3.setText("0.00");

        jLabel12.setText("ns");

        jTextFieldCount3.setEditable(false);
        jTextFieldCount3.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount3.setText("0");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel11)
                .addComponent(jTextFieldDelay3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel12)
                .addComponent(jTextFieldCount3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel13.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel13.setText("CH 4");

        jTextFieldCount4.setEditable(false);
        jTextFieldCount4.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount4.setText("0");

        jTextFieldDelay4.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay4.setText("0.00");

        jLabel14.setText("ns");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel13)
                .addComponent(jTextFieldDelay4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel14))
        );

        jLabel15.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel15.setText("CH 5");

        jTextFieldCount5.setEditable(false);
        jTextFieldCount5.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount5.setText("0");

        jTextFieldDelay5.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay5.setText("0.00");

        jLabel16.setText("ns");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount5, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay5, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel15)
                .addComponent(jTextFieldDelay5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel16))
        );

        jLabel17.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel17.setText("CH 6");

        jTextFieldCount6.setEditable(false);
        jTextFieldCount6.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount6.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount6.setText("0");

        jTextFieldDelay6.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay6.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay6.setText("0.00");

        jLabel18.setText("ns");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount6, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel17)
                .addComponent(jTextFieldDelay6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel18))
        );

        jLabel19.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel19.setText("CH 7");

        jTextFieldCount7.setEditable(false);
        jTextFieldCount7.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount7.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount7.setText("0");

        jTextFieldDelay7.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay7.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay7.setText("0.00");

        jLabel20.setText("ns");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount7, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay7, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel19)
                .addComponent(jTextFieldDelay7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel20))
        );

        jLabel21.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel21.setText("CH 8");

        jTextFieldCount8.setEditable(false);
        jTextFieldCount8.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount8.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount8.setText("0");

        jTextFieldDelay8.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay8.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay8.setText("0.00");

        jLabel22.setText("ns");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount8, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay8, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel21)
                .addComponent(jTextFieldDelay8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel22))
        );

        jLabel23.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel23.setText("CH 9");

        jTextFieldCount9.setEditable(false);
        jTextFieldCount9.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount9.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount9.setText("0");

        jTextFieldDelay9.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay9.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay9.setText("0.00");

        jLabel24.setText("ns");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addComponent(jLabel23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount9, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay9, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel24)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel23)
                .addComponent(jTextFieldDelay9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel24))
        );

        jLabel25.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel25.setText("CH10");

        jTextFieldCount10.setEditable(false);
        jTextFieldCount10.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount10.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount10.setText("0");

        jTextFieldDelay10.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay10.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay10.setText("0.00");

        jLabel26.setText("ns");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount10, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel26)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel25)
                .addComponent(jTextFieldDelay10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel26))
        );

        jLabel27.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel27.setText("CH11");

        jTextFieldCount11.setEditable(false);
        jTextFieldCount11.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount11.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount11.setText("0");

        jTextFieldDelay11.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay11.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay11.setText("0.00");

        jLabel28.setText("ns");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount11, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay11, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel28)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel27)
                .addComponent(jTextFieldDelay11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel28))
        );

        jLabel29.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel29.setText("CH12");

        jTextFieldCount12.setEditable(false);
        jTextFieldCount12.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount12.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount12.setText("0");

        jTextFieldDelay12.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay12.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay12.setText("0.00");

        jLabel30.setText("ns");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount12, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay12, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel30)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel29)
                .addComponent(jTextFieldDelay12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel30))
        );

        jLabel31.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel31.setText("CH13");

        jTextFieldCount13.setEditable(false);
        jTextFieldCount13.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount13.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount13.setText("0");

        jTextFieldDelay13.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay13.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay13.setText("0.00");

        jLabel32.setText("ns");

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount13, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay13, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel32)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel31)
                .addComponent(jTextFieldDelay13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel32))
        );

        jLabel33.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel33.setText("CH14");

        jTextFieldCount14.setEditable(false);
        jTextFieldCount14.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount14.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount14.setText("0");

        jTextFieldDelay14.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay14.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay14.setText("0.00");

        jLabel34.setText("ns");

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount14, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay14, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel34)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel33)
                .addComponent(jTextFieldDelay14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel34))
        );

        jLabel35.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel35.setText("CH15");

        jTextFieldCount15.setEditable(false);
        jTextFieldCount15.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount15.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount15.setText("0");

        jTextFieldDelay15.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay15.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay15.setText("0.00");

        jLabel36.setText("ns");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addComponent(jLabel35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount15, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay15, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel36)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel35)
                .addComponent(jTextFieldDelay15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel36))
        );

        jLabel37.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jLabel37.setText("CH16");

        jTextFieldCount16.setEditable(false);
        jTextFieldCount16.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldCount16.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCount16.setText("0");

        jTextFieldDelay16.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldDelay16.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldDelay16.setText("0.00");

        jLabel38.setText("ns");

        jCheckBoxAutoRestart.setText("AutoRestart");

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addComponent(jLabel37)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldCount16, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDelay16, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxAutoRestart)
                .addGap(17, 17, 17))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextFieldCount16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel37)
                .addComponent(jTextFieldDelay16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel38)
                .addComponent(jCheckBoxAutoRestart))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Trigger"));

        jLabel8.setText("Frequency");

        jTextFieldTriggerFrequency.setEditable(false);
        jTextFieldTriggerFrequency.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldTriggerFrequency.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTriggerFrequency.setText("0");

        jLabel9.setText("Hz");

        jLabel10.setText("Period");

        jTextFieldTriggerPeriod.setEditable(false);
        jTextFieldTriggerPeriod.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldTriggerPeriod.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTriggerPeriod.setText("0.000");

        jLabel39.setText("ns");

        jTextFieldTriggerPeriodPM.setEditable(false);
        jTextFieldTriggerPeriodPM.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldTriggerPeriodPM.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldTriggerPeriodPM.setText("0.000");

        jLabel40.setText("ns");

        jLabel41.setText("±");

        jLabel42.setText("Source                CH 0");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel42)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel10))
                                .addGap(3, 3, 3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldTriggerPeriodPM, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                            .addComponent(jTextFieldTriggerFrequency)
                            .addComponent(jTextFieldTriggerPeriod))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel39))
                    .addComponent(jLabel9)
                    .addComponent(jLabel40))
                .addGap(12, 12, 12))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel42)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextFieldTriggerFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextFieldTriggerPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldTriggerPeriodPM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40)
                    .addComponent(jLabel41))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel45.setText("Pulse Period");

        jTextFieldPulsePeriod.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldPulsePeriod.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldPulsePeriod.setText("13.150");

        jLabel46.setText("ns");

        jLabel47.setText("Gate Width");

        jTextFieldGateWidth.setFont(new java.awt.Font("Monospaced", 0, 13)); // NOI18N
        jTextFieldGateWidth.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldGateWidth.setText("3.0");

        jLabel48.setText("ns");

        jLabel51.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel51.setText("Coincidence");

        jTextFieldCoincidence.setFont(new java.awt.Font("Monospaced", 0, 36)); // NOI18N
        jTextFieldCoincidence.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCoincidence.setText("0");
        jTextFieldCoincidence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCoincidenceActionPerformed(evt);
            }
        });

        jLabel52.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel52.setText("Efficiency 1");

        jTextFieldCoinEffe1.setFont(new java.awt.Font("Monospaced", 0, 36)); // NOI18N
        jTextFieldCoinEffe1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCoinEffe1.setText("0.000");

        jLabel53.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel53.setText("Efficiency 2");

        jTextFieldCoinEffe2.setFont(new java.awt.Font("Monospaced", 0, 36)); // NOI18N
        jTextFieldCoinEffe2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldCoinEffe2.setText("0.000");

        jButton1.setText("Clear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel52)
                            .addGap(152, 152, 152)
                            .addComponent(jLabel53)
                            .addGap(107, 107, 107))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(15, 15, 15)
                                    .addComponent(jLabel45)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel51)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jTextFieldPulsePeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel46)))
                                    .addGap(48, 48, 48)
                                    .addComponent(jLabel47)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextFieldGateWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel48)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jTextFieldCoincidence, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTextFieldCoinEffe1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(jTextFieldCoinEffe2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(120, 120, 120)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(jTextFieldPulsePeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46)
                    .addComponent(jLabel47)
                    .addComponent(jTextFieldGateWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jTextFieldCoincidence))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldCoinEffe1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldCoinEffe2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(jLabel53)
                    .addComponent(jLabel51)))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  private void jCheckBoxIntItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxIntItemStateChanged
      jButtonClear.setEnabled(jCheckBoxInt.isSelected());
  }//GEN-LAST:event_jCheckBoxIntItemStateChanged

  private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
      chartPanel.updateSeries("Histogram", Arrays.asList(new Integer[]{0}), Arrays.asList(new Integer[]{0}), null);
  }//GEN-LAST:event_jButtonClearActionPerformed

    private void jTextFieldCoincidenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCoincidenceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCoincidenceActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.statisticCoins = 0;
        this.statisticExp = 0;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonFittingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFittingActionPerformed
        if (preXList.isEmpty()) {
            return;
        }
        final ArrayList<Double> xsSS = preXList;
        final ArrayList<Double> ysSS = preYList;
        new Thread(() -> {
            try {
                ArrayList<Double> xs = new ArrayList<>();
                ArrayList<Double> ys = new ArrayList<>();
                for (int i = 0; i < ysSS.size(); i++) {
                    if (ysSS.get(i) != 0) {
                        xs.add(xsSS.get(i));
                        ys.add(ysSS.get(i));
                    }
                }
                Process process = Runtime.getRuntime().exec("python Gaussian.py");
                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                StringBuilder sb = new StringBuilder();
                for (Double x : xs) {
                    sb.append(x).append(",");
                }
                sb.delete(sb.length() - 1, sb.length());
                sb.append(";");
                for (Double y : ys) {
                    sb.append(y).append(",");
                }
                sb.delete(sb.length() - 1, sb.length());
                PrintWriter pw = new PrintWriter(process.getOutputStream());
                pw.println(sb.toString());
                pw.flush();
                BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
                while (true) {
                    String errorLine = errorReader.readLine();
                    if (errorLine == null) {
                        break;
                    }
                    System.out.println(errorLine);
                }
                String resultS = reader.readLine();
                if (resultS != null) {
                    String[] rs = resultS.replaceAll("\\[ *", "").replaceAll("\\]", "").split(" +");
                    Double amp = Double.parseDouble(rs[0]);
                    Double x0 = Double.parseDouble(rs[1]);
                    Double sigma = Double.parseDouble(rs[2]);
                    Double b = Double.parseDouble(rs[3]);
                    ArrayList<Double> fittedYs = new ArrayList<>();
                    for (Double x : xs) {
                        double y = amp * Math.exp(-(x - x0) * (x - x0) / (2 * sigma * sigma)) + b;
                        fittedYs.add(y);
                    }
                    String x0S = "" + ((int) (x0 * 1000));
                    String sigmaS = "" + ((int) (sigma * 1000));
                    SwingUtilities.invokeLater(() -> {
                        chartPanel.updateSeries("Fitted", xs, fittedYs, null);
                        jLabelFittingResult.setText(x0S + " (" + sigmaS + ") ps");
                    });
                }
            } catch (IOException ex) {
                Logger.getLogger(AppFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }//GEN-LAST:event_jButtonFittingActionPerformed

    private void jButtonFittingClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFittingClearActionPerformed
        chartPanel.updateSeries("Fitted", Arrays.asList(new Integer[]{0}), Arrays.asList(new Integer[]{0}), null);
        jLabelFittingResult.setText("");
    }//GEN-LAST:event_jButtonFittingClearActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        chartPanel.updateSeries("HOM", Arrays.asList(new Integer[]{1}), Arrays.asList(new Integer[]{0}), null);
        homCoins = new double[200];
        homExpCoins = new double[200];
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.lang.Exception
     */
    public static void main(String args[]) throws Exception {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        java.awt.EventQueue.invokeLater(() -> {
            new AppFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonFitting;
    private javax.swing.JButton jButtonFittingClear;
    private javax.swing.JCheckBox jCheckBoxAutoRestart;
    private javax.swing.JCheckBox jCheckBoxClockOut;
    private javax.swing.JCheckBox jCheckBoxInt;
    private javax.swing.JCheckBox jCheckBoxViewHOM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelFittingResult;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextFieldClockGate;
    private javax.swing.JTextField jTextFieldClockRep;
    private javax.swing.JTextField jTextFieldCoinEffe1;
    private javax.swing.JTextField jTextFieldCoinEffe2;
    private javax.swing.JTextField jTextFieldCoincidence;
    private javax.swing.JTextField jTextFieldCount1;
    private javax.swing.JTextField jTextFieldCount10;
    private javax.swing.JTextField jTextFieldCount11;
    private javax.swing.JTextField jTextFieldCount12;
    private javax.swing.JTextField jTextFieldCount13;
    private javax.swing.JTextField jTextFieldCount14;
    private javax.swing.JTextField jTextFieldCount15;
    private javax.swing.JTextField jTextFieldCount16;
    private javax.swing.JTextField jTextFieldCount2;
    private javax.swing.JTextField jTextFieldCount3;
    private javax.swing.JTextField jTextFieldCount4;
    private javax.swing.JTextField jTextFieldCount5;
    private javax.swing.JTextField jTextFieldCount6;
    private javax.swing.JTextField jTextFieldCount7;
    private javax.swing.JTextField jTextFieldCount8;
    private javax.swing.JTextField jTextFieldCount9;
    private javax.swing.JTextField jTextFieldDelay1;
    private javax.swing.JTextField jTextFieldDelay10;
    private javax.swing.JTextField jTextFieldDelay11;
    private javax.swing.JTextField jTextFieldDelay12;
    private javax.swing.JTextField jTextFieldDelay13;
    private javax.swing.JTextField jTextFieldDelay14;
    private javax.swing.JTextField jTextFieldDelay15;
    private javax.swing.JTextField jTextFieldDelay16;
    private javax.swing.JTextField jTextFieldDelay2;
    private javax.swing.JTextField jTextFieldDelay3;
    private javax.swing.JTextField jTextFieldDelay4;
    private javax.swing.JTextField jTextFieldDelay5;
    private javax.swing.JTextField jTextFieldDelay6;
    private javax.swing.JTextField jTextFieldDelay7;
    private javax.swing.JTextField jTextFieldDelay8;
    private javax.swing.JTextField jTextFieldDelay9;
    private javax.swing.JTextField jTextFieldGateWidth;
    private javax.swing.JTextField jTextFieldIndexSignal;
    private javax.swing.JTextField jTextFieldIndexTrigger;
    private javax.swing.JTextField jTextFieldPulsePeriod;
    private javax.swing.JTextField jTextFieldTriggerFrequency;
    private javax.swing.JTextField jTextFieldTriggerPeriod;
    private javax.swing.JTextField jTextFieldTriggerPeriodPM;
    private javax.swing.JTextField jTextFieldViewFrom;
    private javax.swing.JTextField jTextFieldViewTo;
    // End of variables declaration//GEN-END:variables

    private void dataIncome(ArrayList<Long> dataList) {
        dataList.forEach((data) -> {
            long time = data >> 4;
            int channel = (int) (data & 0b1111);
            feedTimeEvent(channel, time);
        });
    }

    private final ArrayList<Long>[] timeEvents;
    private long unitEndTime = 0;
    private final double[] delays = new double[16];

    private void feedTimeEvent(int channel, long time) {
        if (time > unitEndTime) {
            flush();
        }
        timeEvents[channel].add(time);
    }

    private void flush() {
        ArrayList<Long>[] dataBlock = new ArrayList[timeEvents.length];
        for (int i = 0; i < timeEvents.length; i++) {
            dataBlock[i] = timeEvents[i];
            timeEvents[i] = new ArrayList<>();
            long delay = (long) (delays[i] * 1000);
            for (int j = 0; j < dataBlock[i].size(); j++) {
                dataBlock[i].set(j, dataBlock[i].get(j) + delay);
            }
        }
        dataBlockQueue.offer(new DataBlock(dataBlock));
        unitEndTime += 1000000000000l;
    }

    private final BlockingQueue<DataBlock> dataBlockQueue = new LinkedBlockingDeque<>();

    public class DataBlock {

        private final ArrayList<Long>[] data;

        private DataBlock(ArrayList<Long>[] data) {
            this.data = data;
        }
    }

    private int statisticCoins = 0;
    private double statisticExp = 0;
    private ArrayList<Double> preXList = new ArrayList<>();
    private ArrayList<Double> preYList = new ArrayList<>();
    private double[] homCoins = new double[200];
    private double[] homExpCoins = new double[200];
    private DataBlockParser dataBlockParser = new MDIQKDDataBlockParser();
    private ExperimentParameters parameters = new ExperimentParameters("CoarseDelayMeasurement", 70000000, 512000, 0, 0, 1, new ArrayList<>());

    private ExperimentParameters getExperimentParameters() {
        return parameters;
    }

    public class ExperimentParameters {

        private String mode;
        private int repetitionRate;
        private int pseudoRandomNumberSize;
        private long delay1;
        private long delay2;
        private int integrationTime;
        private final ArrayList<RandomNumberEntry> randomNumberEntrys;

        public ExperimentParameters(String mode, int repetitionRate, int pseudoRandomNumberSize,
                long delay1, long delay2, int integrationTime, ArrayList<RandomNumberEntry> randomNumberEntrys) {
            this.mode = mode;
            this.repetitionRate = repetitionRate;
            this.pseudoRandomNumberSize = pseudoRandomNumberSize;
            this.delay1 = delay1;
            this.delay2 = delay2;
            this.integrationTime = integrationTime;
            this.randomNumberEntrys = randomNumberEntrys;
        }

        public String getMode() {
            return mode;
        }

        public int getRepetitionRate() {
            return repetitionRate;
        }

        public int getPseudoRandomNumberSize() {
            return pseudoRandomNumberSize;
        }

        public long getDelay1() {
            return delay1;
        }

        public long getDelay2() {
            return delay2;
        }

        public int getIntegrationTime() {
            return integrationTime;
        }

        public ArrayList<RandomNumberEntry> getDecoyRandomNumbers() {
            return randomNumberEntrys;
        }
    }

    public class RandomNumberEntry {

        private final int decoy;
        private final int basis;
        private final int encoding;

        public RandomNumberEntry(int decoy, int basis, int encoding) {
            this.decoy = decoy;
            this.basis = basis;
            this.encoding = encoding;
        }

        public int getDecoy() {
            return decoy;
        }

        public int getBasis() {
            return basis;
        }

        public int getEncoding() {
            return encoding;
        }
    }

    private void doFlushLoop() {
        while (true) {
            try {
                DataBlock dataBlock = dataBlockQueue.take();
                ExperimentParameters parameters = getExperimentParameters();
                HashMap<String, Object> result = dataBlockParser.parse(dataBlock, parameters);

//                final int[] counters = new int[dataBlock.data.length];
                //                for (int i = 0; i < dataBlock.data.length; i++) {
                //                    ArrayList<Long> timeEventList = dataBlock.data[i];
                //                    counters[i] = timeEventList.size();
                //                }
                //
                //                ArrayList<Long> clockList = dataBlock.data[15];
                //                ArrayList<Long> triggerList = dataBlock.data[indexTrigger - 1];
                //                ArrayList<Long> signalList = dataBlock.data[indexSignal - 1];
                //                ArrayList<Long> monitorList = dataBlock.data[4];
                //                final Object[] triggerInfo = doAssessTrigger(clockList);
                //                final Histo histogram = doHistogram(triggerList, signalList, jCheckBoxClockOut.isSelected() ? clockList : null, clockGateWidth, clockRep);
                //                final int coincidenceCount = doCoincidence(histogram, 3000);
                ////                final double coinEff1 = ((double) coincidenceCount) / signalList.size();
                ////                final double coinEff2 = ((double) coincidenceCount) / triggerList.size();
                //                double exp = (counters[0] / 250e6) * (counters[1] / 250e6) * 250e6;
                //                final double coinEff = coincidenceCount / exp;
                //                this.statisticCoins += coincidenceCount;
                //                this.statisticExp += exp;
                ////                System.out.println(exp + ", " + statisticExp);
                //                final double staticticCoinEff = statisticExp == 0 ? 0 : statisticCoins / statisticExp;
                ////                ArrayList<Double> results = new ArrayList<>();
                ////                results.add((double) counters[15]);
                ////                results.add((double) counters[0]);
                ////                results.add((double) counters[1]);
                ////                for (int i = -25; i <= 25; i++) {
                ////                    results.add((double) doCoincidence(histogram, i * 4000, 3000) / exp);
                ////                }
                ////                for (Double d : results) {
                ////                    System.out.print(d + "\t");
                ////                }
                ////                System.out.println();
                //
                //                if (counters[15] != 0 && (counters[0] == 0 || counters[1] == 0 || counters[4] == 0) && jCheckBoxAutoRestart.isSelected()) {
                //                    new Thread(() -> {
                //                        try {
                //                            Socket socket = new Socket("192.168.1.80", 20008);
                //                            PrintWriter pw = new PrintWriter(socket.getOutputStream());
                //                            pw.println("restart");
                //                            pw.close();
                //                        } catch (IOException ex) {
                //                            Logger.getLogger(AppFrame.class.getName()).log(Level.SEVERE, null, ex);
                //                        }
                //                    }).start();
                //                }
                //
                //                ArrayList<ShortTermDataItem> stdis = jCheckBoxViewHOM.isSelected()
                //                        ? doHOMHistogram(triggerList, signalList, monitorList, clockList, jCheckBoxClockOut.isSelected(), clockGateWidth, clockRep)
                //                        : new ArrayList<>();
                //
                //                SwingUtilities.invokeLater(() -> {
                //                    for (int i = 0; i < counters.length; i++) {
                //                        counterFields[i].setText(formatComm(counters[i]));
                //                    }
                //                    jTextFieldTriggerFrequency.setText(formatComm((int) triggerInfo[0]));
                //                    jTextFieldTriggerPeriod.setText(formatDouble((double) triggerInfo[1]));
                //                    jTextFieldTriggerPeriodPM.setText(formatDouble((double) triggerInfo[2]));
                //                    if (histogram != null) {
                //                        List<Double> originalXData = histogram.getxAxisData();
                //                        ArrayList<Double> xData = new ArrayList<>(originalXData.size());
                //                        originalXData.forEach((originalX) -> {
                //                            xData.add(originalX / 1000);
                //                        });
                //                        Series series = chart.getSeriesMap().get("Histogram");
                //                        Collection<? extends Number> originalYData = series.getYData();
                //                        ArrayList<Double> yData = new ArrayList<>(histogram.getyAxisData());
                //                        if (originalYData != null && originalYData.size() == histogram.getyAxisData().size() && jCheckBoxInt.isSelected()) {
                //                            Iterator<? extends Number> it = originalYData.iterator();
                //                            for (int i = 0; i < yData.size(); i++) {
                //                                yData.set(i, yData.get(i) + it.next().doubleValue());
                //                            }
                //                        }
                //
                //                        preXList = xData;
                //                        preYList = yData;
                ////                            System.out.println(xData);
                ////                            System.out.println(yData);
                ////                            System.out.prinprintlntln("---------------------------");
                //                        chartPanel.updateSeries("Histogram", xData, yData, null);
                //                        jTextFieldCoincidence.setText("" + coincidenceCount);
                //                        jTextFieldCoinEffe1.setText("" + formatDouble(coinEff));
                //                        jTextFieldCoinEffe2.setText("" + formatDouble(staticticCoinEff));
                //                    }
                //
                //                    //HOM
                //                    for (ShortTermDataItem stdi : stdis) {
                //                        homCoins[stdi.k] += stdi.councidenceCount;
                //                        homExpCoins[stdi.k] += stdi.expectCoincidenceCount;
                //                    }
                //                    ArrayList<Double> xData = new ArrayList<>();
                //                    ArrayList<Double> yData = new ArrayList<>();
                //                    ArrayList<Double> eData = new ArrayList<>();
                //                    for (int i = 0; i < homCoins.length; i++) {
                //                        double coins = homCoins[i];
                //                        double expCoins = homExpCoins[i];
                //                        if (expCoins != 0) {
                //                            xData.add(Math.pow(1.1, i));
                //                            yData.add(coins / expCoins);
                //                            eData.add(Math.sqrt(1 / coins) * coins / expCoins);
                //                        }
                //                    }
                //                    if (xData.size() > 0) {
                //                        homChartPanel.updateSeries("HOM", xData, yData, eData);
                //                    }
                //                });
            } catch (InterruptedException ex) {
                Logger.getLogger(AppFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private ArrayList<ShortTermDataItem> doHOMHistogram(ArrayList<Long> tList, ArrayList<Long> sList, ArrayList<Long> monitorList, ArrayList<Long> clockList, boolean clockOut, int clockGateWidth, int clockRep) {
        if (clockOut) {
            tList = timeFilter(clockList, tList, clockGateWidth, clockRep);
            sList = timeFilter(clockList, sList, clockGateWidth, clockRep);
        }
        if (clockList.isEmpty()) {
            return new ArrayList<>();
        }
        long startTime = clockList.get(0);
        long stopTime = clockList.get(clockList.size() - 1);
        ArrayList<Long> splitPoints = new ArrayList<>();
        for (int i = 0; i < 1001; i++) {
            splitPoints.add(startTime + i * 1000000000l);
        }
        ArrayList<ArrayList<Long>> splittedTList = splitTimeListByTimes(tList, splitPoints);
        ArrayList<ArrayList<Long>> splittedSList = splitTimeListByTimes(sList, splitPoints);
        ArrayList<ArrayList<Long>> splittedMList = splitTimeListByTimes(monitorList, splitPoints);
        ArrayList<ShortTermDataItem> rs = new ArrayList<>();
        for (int i = 0; i < splittedTList.size(); i++) {
            Histo histo = doHistogramGodMode(splittedTList.get(i), splittedSList.get(i));
            int coincidenceCount = doCoincidence(histo, 3000);
            if (splittedMList.get(i).size() > 0) {
                rs.add(new ShortTermDataItem(splittedTList.get(i).size(), splittedSList.get(i).size(), splittedMList.get(i).size(), coincidenceCount));
            }
        }
        return rs;
    }

    private class ShortTermDataItem {

        private final int tCount;
        private final int sCount;
        private final int monitorCount;
        private final int councidenceCount;
        private final double expectCoincidenceCount;
        private final int k;
        private final double binStart;

        public ShortTermDataItem(int tCount, int sCount, int monitorCount, int councidenceCount) {
            this.tCount = tCount;
            this.sCount = sCount;
            this.monitorCount = monitorCount;
            this.councidenceCount = councidenceCount;
            this.expectCoincidenceCount = (tCount / 250e3) * (sCount / 250e3) * (250e3);
            this.k = (int) (Math.log(monitorCount) / Math.log(1.1));
            this.binStart = Math.pow(1.1, k);
        }
    }

    private ArrayList<ArrayList<Long>> splitTimeListByTimes(ArrayList<Long> list, ArrayList<Long> times) {
        ArrayList<ArrayList<Long>> splitted = new ArrayList<>();
        Iterator<Long> it = list.iterator();
        long next = -1;
        Iterator<Long> timeIt = times.iterator();
        while (timeIt.hasNext()) {
            long endTime = timeIt.next();
            ArrayList<Long> sl = new ArrayList<>();
            while (next <= endTime) {
                sl.add(next);
                next = it.hasNext() ? it.next() : Long.MAX_VALUE;
            }
            splitted.add(sl);
        }
        splitted.remove(0);
        return splitted;
    }

    private Histo doHistogram(ArrayList<Long> tList, ArrayList<Long> sList, ArrayList<Long> clockList, int clockGateWidth, int clockRep) {
        if (clockList != null) {
            tList = timeFilter(clockList, tList, clockGateWidth, clockRep);
            sList = timeFilter(clockList, sList, clockGateWidth, clockRep);
        }
        return doHistogramGodMode(tList, sList);
    }

    private ArrayList<Long> timeFilter(ArrayList<Long> clockList, ArrayList<Long> signalList, int gate, int rep) {
        ArrayList<Long> filted = new ArrayList<>();

        if (clockList.size() >= 2 && !signalList.isEmpty()) {
            Iterator<Long> clockIt = clockList.iterator();
            Iterator<Long> signalIt = signalList.iterator();
            long clockStart = clockIt.next();
            long clockStop = clockIt.next();
            long signal = signalIt.next();
            while (clockStop >= 0 && signal >= 0) {
                if (signal < clockStart) {
                    signal = -1;
                } else if (signal >= clockStop) {
                    clockStart = clockStop;
                    clockStop = -1;
                } else {
                    int delta = (int) (signal - clockStart);
                    int rem = delta % rep;
                    if (rem >= 0 && rem <= gate) {
                        filted.add(signal);
                    }
                    signal = -1;
                }
                if (clockStop == -1 && clockIt.hasNext()) {
                    clockStop = clockIt.next();
                }
                if (signal == -1 && signalIt.hasNext()) {
                    signal = signalIt.next();
                }
            }
        }
        return filted;
    }

    private Histo doHistogramGodMode(ArrayList<Long> tList, ArrayList<Long> sList) {
        long viewFromPS = (long) (viewFrom * 1000);
        long viewToPS = (long) (viewTo * 1000);
        ArrayList<Long> deltas = new ArrayList<>();
        if (!tList.isEmpty() && !sList.isEmpty()) {
            int preStartT = 0;
            int lengthT = tList.size();
            for (long s : sList) {
                while (preStartT < lengthT) {
                    long t = tList.get(preStartT);
                    long delta = s - t;
                    if (delta > viewToPS) {
                        preStartT++;
                    } else {
                        break;
                    }
                }
                for (int tIndex = preStartT; tIndex < lengthT; tIndex++) {
                    long t = tList.get(tIndex);
                    long delta = s - t;
                    if (delta > viewFromPS) {
                        deltas.add(delta);
                    } else {
                        break;
                    }
                }
            }
        }
        return makeHistogram(deltas, viewFromPS, viewToPS);
    }

    private Histo makeHistogram(ArrayList<Long> data, double min, double max) {
        return new Histo(new Histogram(data, 2000, min, max));
    }

    private int doCoincidence(Histo histogram, int gate) {
        return doCoincidence(histogram, 0, gate);
    }

    private int doCoincidence(Histo histogram, int center, int gate) {
        int coins = 0;
        ArrayList<Double> xs = histogram.xData;
        ArrayList<Double> ys = histogram.yData;
        for (int i = 0; i < xs.size(); i++) {
            double x = xs.get(i);
            if (x > center - gate / 2.0 && x < center + gate / 2.0) {
                coins += ys.get(i);
            }
        }
        return coins;
    }

    private Object[] doAssessTrigger(ArrayList<Long> triggerList) {
        int frequency = triggerList.size();
        if (frequency > 0) {
            double mean = (triggerList.get(triggerList.size() - 1) - triggerList.get(0)) / ((double) (triggerList.size() - 1));
            double maxDelta = 0;
            Iterator<Long> iterator = triggerList.iterator();
            Long a = iterator.next();
            while (iterator.hasNext()) {
                Long b = iterator.next();
                double delta = Math.abs(b - a - mean);
                if (delta > maxDelta) {
                    maxDelta = delta;
                }
                a = b;
            }
            return new Object[]{frequency, mean / 1000, maxDelta / 1000};
        } else {
            return new Object[]{0, 0., 0.};
        }
    }

    private void initServer() {
        final TDCParser tdcParser = new TDCParser((Object data) -> {
            if (data instanceof ArrayList) {
                ArrayList list = (ArrayList) data;
                if (list.size() > 0) {
                    dataIncome(list);
                }
            } else {
                throw new RuntimeException();
            }
        }, new GroundTDCDataAdapter(new int[]{1, 4, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0}));
        new Thread(() -> {
            try {
                ServerSocket server = new ServerSocket(20156);
                byte[] buffer = new byte[1024 * 1024 * 16];
                while (!server.isClosed()) {
                    Socket socket = server.accept();
                    System.out.println("Connected");
                    try {
                        InputStream in = socket.getInputStream();
                        while (!socket.isClosed()) {
                            int read = in.read(buffer);
                            tdcParser.offer(Arrays.copyOfRange(buffer, 0, read));
                        }
                    } catch (Exception e) {
                    }
                    System.out.println("End");
                }
            } catch (Exception e) {
                e.printStackTrace(System.err);
            }
        }).start();

        final TDCParser tdcParser2 = new TDCParser((Object data) -> {
            if (data instanceof ArrayList) {
                ArrayList list = (ArrayList) data;
                if (list.size() > 0) {
                    dataIncome(list);
                }
            } else {
                throw new RuntimeException();
            }
        }, new SimpleTDCDataAdapter());
        new Thread(() -> {
            try {
                ServerSocket server = new ServerSocket(20158);
                byte[] buffer = new byte[1024 * 1024 * 16];
                while (!server.isClosed()) {
                    Socket socket = server.accept();
                    System.out.println("Connected Simple TDC");
                    try {
                        InputStream in = socket.getInputStream();
                        while (!socket.isClosed()) {
                            int read = in.read(buffer);
                            tdcParser2.offer(Arrays.copyOfRange(buffer, 0, read));
                        }
                    } catch (Exception e) {
                    }
                    System.out.println("End");
                }
            } catch (Exception e) {
                e.printStackTrace(System.err);
            }
        }).start();

        new Thread(() -> {
            doFlushLoop();
        }).start();
    }

    private void loadPreferences() {
        for (int i = 0; i < delays.length; i++) {
            try {
                delays[i] = preferences.getDouble("Delay" + i, 0);
                delayFields[i].setText("" + delays[i]);
            } catch (Exception e) {
            }
        }
        indexTrigger = preferences.getInt("IndexTrigger", 1);
        jTextFieldIndexTrigger.setText("" + indexTrigger);
        indexSignal = preferences.getInt("IndexSignal", 2);
        jTextFieldIndexSignal.setText("" + indexSignal);
        viewFrom = preferences.getDouble("ViewFrom", -100);
        jTextFieldViewFrom.setText("" + viewFrom);
        viewTo = preferences.getDouble("ViewTo", 100);
        jTextFieldViewTo.setText("" + viewTo);
        pulsePeriod = preferences.getDouble("PulsePeriod", 13.15);
        jTextFieldPulsePeriod.setText("" + pulsePeriod);
        gateWidth = preferences.getDouble("GateWidth", 3);
        jTextFieldGateWidth.setText("" + gateWidth);
        clockGateWidth = preferences.getInt("ClockGateWidth", 300);
        jTextFieldClockGate.setText("" + clockGateWidth);
        clockRep = preferences.getInt("ClockRep", 13159);
        jTextFieldClockRep.setText("" + clockRep);
    }

    private void savePreferences() {
        for (int i = 0; i < delays.length; i++) {
            try {
                preferences.putDouble("Delay" + i, delays[i]);
            } catch (Exception e) {
            }
        }
        preferences.putInt("IndexTrigger", indexTrigger);
        preferences.putInt("IndexSignal", indexSignal);
        preferences.putDouble("ViewFrom", viewFrom);
        preferences.putDouble("ViewTo", viewTo);
        preferences.putDouble("PulsePeriod", pulsePeriod);
        preferences.putDouble("GateWidth", gateWidth);
        preferences.putInt("ClockGateWidth", clockGateWidth);
        preferences.putInt("ClockRep", clockRep);
    }

    private void connectPreferences() {
        for (int i = 0; i < delayFields.length; i++) {
            final JTextField delayField = delayFields[i];
            final int index = i;
            delayField.addFocusListener(new FocusAdapter() {
                @Override
                public void focusLost(FocusEvent e) {
                    String text = delayField.getText();
                    try {
                        double delay = Double.parseDouble(text);
                        delays[index] = delay;
                        savePreferences();
                    } catch (Exception ex) {
                    }
                }
            });
        }
        jTextFieldIndexTrigger.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                String text = jTextFieldIndexTrigger.getText();
                try {
                    indexTrigger = Integer.parseInt(text);
                    if (indexTrigger <= 0) {
                        indexTrigger = 1;
                        jTextFieldIndexTrigger.setText("1");
                    } else if (indexTrigger > timeEvents.length) {
                        indexTrigger = timeEvents.length;
                        jTextFieldIndexTrigger.setText("" + timeEvents.length);
                    }
                    savePreferences();
                } catch (Exception ex) {
                }
            }
        });
        jTextFieldIndexSignal.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                String text = jTextFieldIndexSignal.getText();
                try {
                    indexSignal = Integer.parseInt(text);
                    if (indexSignal <= 0) {
                        indexSignal = 1;
                        jTextFieldIndexSignal.setText("1");
                    } else if (indexSignal > timeEvents.length) {
                        indexSignal = timeEvents.length;
                        jTextFieldIndexSignal.setText("" + timeEvents.length);
                    }
                    savePreferences();
                } catch (Exception ex) {
                }
            }
        });
        jTextFieldViewFrom.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                String text = jTextFieldViewFrom.getText();
                try {
                    viewFrom = Double.parseDouble(text);
                    savePreferences();
                } catch (Exception ex) {
                }
            }
        });
        jTextFieldViewTo.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                String text = jTextFieldViewTo.getText();
                try {
                    viewTo = Double.parseDouble(text);
                    savePreferences();
                } catch (Exception ex) {
                }
            }
        });
        jTextFieldPulsePeriod.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                String text = jTextFieldPulsePeriod.getText();
                try {
                    pulsePeriod = Double.parseDouble(text);
                    savePreferences();
                } catch (Exception ex) {
                }
            }
        });
        jTextFieldGateWidth.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                String text = jTextFieldGateWidth.getText();
                try {
                    gateWidth = Double.parseDouble(text);
                    savePreferences();
                } catch (Exception ex) {
                }
            }
        });
        jTextFieldClockGate.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                String text = jTextFieldClockGate.getText();
                try {
                    clockGateWidth = Integer.parseInt(text);
                    savePreferences();
                } catch (Exception ex) {
                }
            }
        });
        jTextFieldClockRep.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                String text = jTextFieldClockRep.getText();
                try {
                    clockRep = Integer.parseInt(text);
                    savePreferences();
                } catch (Exception ex) {
                }
            }
        });
    }

    private String formatComm(int value) {
        return NumberFormat.getInstance().format(value);
    }

    private String formatDouble(double value) {
        return NumberFormat.getInstance().format(value);
    }

    private class Histo {

        private final ArrayList<Double> xData = new ArrayList<>();
        private final ArrayList<Double> yData = new ArrayList<>();
        private final boolean pulseMode;

        private Histo(Histogram histogram) {
            xData.addAll(histogram.getxAxisData());
            yData.addAll(histogram.getyAxisData());
            pulseMode = false;
        }

        private Histo(ArrayList<Integer> pulses) {
            int min = (int) (viewFrom / pulsePeriod);
            int max = (int) (viewTo / pulsePeriod);
            pulseMode = true;
            int size = max - min + 1;
            for (int i = 0; i < size; i++) {
                xData.add((double) (min + i));
                yData.add(0d);
            }
            for (Integer pulse : pulses) {
                int index = pulse - min;
                if (index < yData.size() && index >= 0) {
                    yData.set(index, yData.get(index) + 1);
                }
            }
        }

        public ArrayList<Double> getxAxisData() {
            return xData;
        }

        public ArrayList<Double> getyAxisData() {
            return yData;
        }

        public boolean isPulseMode() {
            return pulseMode;
        }
    }
}
